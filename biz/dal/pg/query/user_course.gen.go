// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/dal/pg/entity"
)

func newUserInCourse(db *gorm.DB, opts ...gen.DOOption) userInCourse {
	_userInCourse := userInCourse{}

	_userInCourse.userInCourseDo.UseDB(db, opts...)
	_userInCourse.userInCourseDo.UseModel(&entity.UserInCourse{})

	tableName := _userInCourse.userInCourseDo.TableName()
	_userInCourse.ALL = field.NewAsterisk(tableName)
	_userInCourse.UserID = field.NewInt64(tableName, "uid")
	_userInCourse.CourseID = field.NewInt64(tableName, "cid")

	_userInCourse.fillFieldMap()

	return _userInCourse
}

type userInCourse struct {
	userInCourseDo

	ALL      field.Asterisk
	UserID   field.Int64
	CourseID field.Int64

	fieldMap map[string]field.Expr
}

func (u userInCourse) Table(newTableName string) *userInCourse {
	u.userInCourseDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInCourse) As(alias string) *userInCourse {
	u.userInCourseDo.DO = *(u.userInCourseDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInCourse) updateTableName(table string) *userInCourse {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt64(table, "uid")
	u.CourseID = field.NewInt64(table, "cid")

	u.fillFieldMap()

	return u
}

func (u *userInCourse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInCourse) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["uid"] = u.UserID
	u.fieldMap["cid"] = u.CourseID
}

func (u userInCourse) clone(db *gorm.DB) userInCourse {
	u.userInCourseDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInCourse) replaceDB(db *gorm.DB) userInCourse {
	u.userInCourseDo.ReplaceDB(db)
	return u
}

type userInCourseDo struct{ gen.DO }

type IUserInCourseDo interface {
	gen.SubQuery
	Debug() IUserInCourseDo
	WithContext(ctx context.Context) IUserInCourseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInCourseDo
	WriteDB() IUserInCourseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInCourseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInCourseDo
	Not(conds ...gen.Condition) IUserInCourseDo
	Or(conds ...gen.Condition) IUserInCourseDo
	Select(conds ...field.Expr) IUserInCourseDo
	Where(conds ...gen.Condition) IUserInCourseDo
	Order(conds ...field.Expr) IUserInCourseDo
	Distinct(cols ...field.Expr) IUserInCourseDo
	Omit(cols ...field.Expr) IUserInCourseDo
	Join(table schema.Tabler, on ...field.Expr) IUserInCourseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInCourseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInCourseDo
	Group(cols ...field.Expr) IUserInCourseDo
	Having(conds ...gen.Condition) IUserInCourseDo
	Limit(limit int) IUserInCourseDo
	Offset(offset int) IUserInCourseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInCourseDo
	Unscoped() IUserInCourseDo
	Create(values ...*entity.UserInCourse) error
	CreateInBatches(values []*entity.UserInCourse, batchSize int) error
	Save(values ...*entity.UserInCourse) error
	First() (*entity.UserInCourse, error)
	Take() (*entity.UserInCourse, error)
	Last() (*entity.UserInCourse, error)
	Find() ([]*entity.UserInCourse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserInCourse, err error)
	FindInBatches(result *[]*entity.UserInCourse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UserInCourse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInCourseDo
	Assign(attrs ...field.AssignExpr) IUserInCourseDo
	Joins(fields ...field.RelationField) IUserInCourseDo
	Preload(fields ...field.RelationField) IUserInCourseDo
	FirstOrInit() (*entity.UserInCourse, error)
	FirstOrCreate() (*entity.UserInCourse, error)
	FindByPage(offset int, limit int) (result []*entity.UserInCourse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInCourseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userInCourseDo) Debug() IUserInCourseDo {
	return u.withDO(u.DO.Debug())
}

func (u userInCourseDo) WithContext(ctx context.Context) IUserInCourseDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInCourseDo) ReadDB() IUserInCourseDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInCourseDo) WriteDB() IUserInCourseDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInCourseDo) Session(config *gorm.Session) IUserInCourseDo {
	return u.withDO(u.DO.Session(config))
}

func (u userInCourseDo) Clauses(conds ...clause.Expression) IUserInCourseDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInCourseDo) Returning(value interface{}, columns ...string) IUserInCourseDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInCourseDo) Not(conds ...gen.Condition) IUserInCourseDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInCourseDo) Or(conds ...gen.Condition) IUserInCourseDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInCourseDo) Select(conds ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInCourseDo) Where(conds ...gen.Condition) IUserInCourseDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInCourseDo) Order(conds ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInCourseDo) Distinct(cols ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInCourseDo) Omit(cols ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInCourseDo) Join(table schema.Tabler, on ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInCourseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInCourseDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInCourseDo) Group(cols ...field.Expr) IUserInCourseDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInCourseDo) Having(conds ...gen.Condition) IUserInCourseDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInCourseDo) Limit(limit int) IUserInCourseDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInCourseDo) Offset(offset int) IUserInCourseDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInCourseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInCourseDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInCourseDo) Unscoped() IUserInCourseDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInCourseDo) Create(values ...*entity.UserInCourse) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInCourseDo) CreateInBatches(values []*entity.UserInCourse, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInCourseDo) Save(values ...*entity.UserInCourse) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInCourseDo) First() (*entity.UserInCourse, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserInCourse), nil
	}
}

func (u userInCourseDo) Take() (*entity.UserInCourse, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserInCourse), nil
	}
}

func (u userInCourseDo) Last() (*entity.UserInCourse, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserInCourse), nil
	}
}

func (u userInCourseDo) Find() ([]*entity.UserInCourse, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserInCourse), err
}

func (u userInCourseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserInCourse, err error) {
	buf := make([]*entity.UserInCourse, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInCourseDo) FindInBatches(result *[]*entity.UserInCourse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInCourseDo) Attrs(attrs ...field.AssignExpr) IUserInCourseDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInCourseDo) Assign(attrs ...field.AssignExpr) IUserInCourseDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInCourseDo) Joins(fields ...field.RelationField) IUserInCourseDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInCourseDo) Preload(fields ...field.RelationField) IUserInCourseDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInCourseDo) FirstOrInit() (*entity.UserInCourse, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserInCourse), nil
	}
}

func (u userInCourseDo) FirstOrCreate() (*entity.UserInCourse, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserInCourse), nil
	}
}

func (u userInCourseDo) FindByPage(offset int, limit int) (result []*entity.UserInCourse, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInCourseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInCourseDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInCourseDo) Delete(models ...*entity.UserInCourse) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInCourseDo) withDO(do gen.Dao) *userInCourseDo {
	u.DO = *do.(*gen.DO)
	return u
}
