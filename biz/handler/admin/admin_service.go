// Code generated by hertz generator.

package admin

import (
	"context"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/dal/pg/entity"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/base"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/srverror"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/service"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/utils"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"net/http"
	"strconv"

	admin "github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/admin"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// DeleteTarget .
// @router /admin/delete [POST]
func DeleteTarget(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.DeleteTargetReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(admin.DeleteTargetResp)
	resp.Base = new(base.BaseResponse)
	_, authority, err := utils.AuthCheck(c)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	if authority != entity.AuthoritySuperAdmin {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "用户权限不够"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	tid, err := strconv.ParseInt(req.Tid, 10, 64)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		hlog.Error("对象id数据格式转换失败：", err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	if req.Target == "video" {
		err = service.VideoServ().DeleteVideoWithVid(ctx, tid)
	} else if req.Target == "user" {
		err = service.UserServ().DeleteUserWithUid(ctx, tid)
	}
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Base = srverror.WrapWithSuccess()
	c.JSON(consts.StatusOK, resp)
}

// UpdateUserInfo .
// @router /admin/update/user [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.UpdateUserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(admin.UpdateUserInfoResp)
	resp.Base = new(base.BaseResponse)
	_, authority, err := utils.AuthCheck(c)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	if authority != entity.AuthoritySuperAdmin {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "用户权限不够"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	uid, err := strconv.ParseInt(req.UID, 10, 64)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		hlog.Error("用户id数据格式转换失败：", err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	err = service.UserServ().UpdateUserInfoWithId(ctx, uid, req.Name, req.Password, req.Avatar, req.Phone)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	err = service.UserServ().UpdateUserIdentityWithUid(ctx, uid, req.Authority)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Base = srverror.WrapWithSuccess()
	c.JSON(consts.StatusOK, resp)
}

// UploadVideo .
// @router /admin/uploadvideo [POST]
func UploadVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.UploadVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(admin.UploadVideoResp)
	resp.Base = new(base.BaseResponse)
	uid, authority, err := utils.AuthCheck(c)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	if authority != entity.AuthoritySuperAdmin {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "用户权限不够"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		hlog.Error("课程域id数据格式转换失败：", err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	length, err := strconv.ParseInt(req.Length, 10, 64)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		hlog.Error("长度数据格式转换失败：", err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	err = service.VideoServ().UploadVideoWithCidAndUid(ctx, uid, cid, req.Source, req.Title, req.Description, req.Cover, int(length))
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Base = srverror.WrapWithSuccess()
	c.JSON(consts.StatusOK, resp)
}

// CreateCourse .
// @router /admin/createcourse [POST]
func CreateCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.CreateCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(admin.CreateCourseResp)
	resp.Base = new(base.BaseResponse)
	uid, authority, err := utils.AuthCheck(c)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	if authority != entity.AuthoritySuperAdmin {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "用户权限不够"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	err = service.CourseServ().CreateCourseWithUid(ctx, uid, req.Title, req.Description, req.Cover)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Base = srverror.WrapWithSuccess()
	c.JSON(consts.StatusOK, resp)
}

// DeleteUserFromCourse .
// @router /admin/update/course/member [POST]
func DeleteUserFromCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.DeleteUserFromCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(admin.DeleteUserFromCourseResp)
	resp.Base = new(base.BaseResponse)
	_, authority, err := utils.AuthCheck(c)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	if authority != entity.AuthoritySuperAdmin {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "用户权限不够"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		hlog.Error("课程域id数据格式转换失败：", err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	uid, err := strconv.ParseInt(req.UID, 10, 64)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		hlog.Error("用户id数据格式转换失败：", err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	err = service.CourseServ().OperateMemberWithCidAndUid(ctx, cid, uid)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Base = srverror.WrapWithSuccess()
	c.JSON(consts.StatusOK, resp)
}

// UpdateCourseInfo .
// @router /admin/update/course [POST]
func UpdateCourseInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.UpdateCourseInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(admin.UpdateCourseInfoResp)
	resp.Base = new(base.BaseResponse)
	_, authority, err := utils.AuthCheck(c)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	if authority != entity.AuthoritySuperAdmin {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "用户权限不够"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		hlog.Error("课程域id数据格式转换失败：", err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	err = service.CourseServ().UpdateCourseWithCid(ctx, cid, req.Title, req.Description, req.Cover)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Base = srverror.WrapWithSuccess()
	c.JSON(consts.StatusOK, resp)
}
