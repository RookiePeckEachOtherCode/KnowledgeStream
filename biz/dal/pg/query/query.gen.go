// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Comment      *comment
	Course       *course
	Notification *notification
	User         *user
	UserInCourse *userInCourse
	Video        *video
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Comment = &Q.Comment
	Course = &Q.Course
	Notification = &Q.Notification
	User = &Q.User
	UserInCourse = &Q.UserInCourse
	Video = &Q.Video
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Comment:      newComment(db, opts...),
		Course:       newCourse(db, opts...),
		Notification: newNotification(db, opts...),
		User:         newUser(db, opts...),
		UserInCourse: newUserInCourse(db, opts...),
		Video:        newVideo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Comment      comment
	Course       course
	Notification notification
	User         user
	UserInCourse userInCourse
	Video        video
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Comment:      q.Comment.clone(db),
		Course:       q.Course.clone(db),
		Notification: q.Notification.clone(db),
		User:         q.User.clone(db),
		UserInCourse: q.UserInCourse.clone(db),
		Video:        q.Video.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Comment:      q.Comment.replaceDB(db),
		Course:       q.Course.replaceDB(db),
		Notification: q.Notification.replaceDB(db),
		User:         q.User.replaceDB(db),
		UserInCourse: q.UserInCourse.replaceDB(db),
		Video:        q.Video.replaceDB(db),
	}
}

type queryCtx struct {
	Comment      ICommentDo
	Course       ICourseDo
	Notification INotificationDo
	User         IUserDo
	UserInCourse IUserInCourseDo
	Video        IVideoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Comment:      q.Comment.WithContext(ctx),
		Course:       q.Course.WithContext(ctx),
		Notification: q.Notification.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		UserInCourse: q.UserInCourse.WithContext(ctx),
		Video:        q.Video.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
