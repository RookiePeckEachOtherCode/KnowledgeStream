// Code generated by hertz generator.

package user

import (
	"context"
	"net/http"
	"strconv"

	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/dal/pg/entity"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/service"

	user "github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserLogin .
// @router /user/login [GET]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserLoginResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "登录成功"
	resp.Base.Code = http.StatusOK

	var uid = new(int64)
	var token = new(string)

	if req.Name != "" {
		uid, token, err = service.UserService().UserLoginWithName(ctx, req.Name, req.Password)
	} else {
		uid, token, err = service.UserService().UserLoginWithPhone(ctx, req.Phone, req.Password)
	}

	if err != nil {
		resp.Base.Msg = err.Error()
		resp.Base.Code = http.StatusUnauthorized
	} else {
		resp.ID = strconv.FormatInt(*uid, 10)
		resp.Token = *token
	}

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserRegisterResp)
	resp.Base = new(user.BaseResponse)
	err = service.UserService().UserRegister(ctx, req.Name, req.Phone, req.Password)
	if err != nil {
		resp.Base.Msg = err.Error()
		resp.Base.Code = http.StatusBadRequest
	} else {
		resp.Base.Msg = "注册成功"
		resp.Base.Code = http.StatusOK
	}
	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /user/info [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserInfoResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "获取成功"
	resp.Base.Code = http.StatusOK

	Uid, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	Authority, exists := c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	uid := Uid.(int64)
	authority := Authority.(entity.AuthorityEnum)
	dbuser, err := service.UserService().GetUserInfoWithId(ctx, uid)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	} else {
		resp.Name = dbuser.Name
		resp.Phone = dbuser.Phone
		resp.Avatar = dbuser.Avatar
		resp.Authoriry = string(authority)
	}

	c.JSON(consts.StatusOK, resp)
}

// UserInfoUpdate .
// @router /user/updateinfo [GET]
func UserInfoUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserInfoUpdateResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "修改信息成功"
	resp.Base.Code = http.StatusOK

	Uid, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	uid := Uid.(int64)
	err = service.UserService().UpdateUserInfoWithId(ctx, uid, req.Name, req.Password, req.Avatar, req.Phone)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	}
	c.JSON(consts.StatusOK, resp)
}
