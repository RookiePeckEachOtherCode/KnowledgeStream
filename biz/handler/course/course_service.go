// Code generated by hertz generator.

package course

import (
	"context"
	course "github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/course"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/service"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"net/http"
	"strconv"
)

// CourseInfo .
// @router /course/info [POST]
func CourseInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.CourseInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.CourseInfoResp)
	resp.Base = new(course.BaseResponse)
	resp.Base.Msg = "查询课程域信息成功"
	resp.Base.Code = http.StatusOK
	_, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "课程域编号格式转换失败"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	result, err := service.CourseServ().CourseInfoWithCid(ctx, cid)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
	}
	resp.Courseinfo = result
	c.JSON(consts.StatusOK, resp)
}

// CourseVideosInfo .
// @router /course/videos [POST]
func CourseVideosInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.CourseVideosInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.CourseVideosInfoResp)
	resp.Base = new(course.BaseResponse)
	resp.Base.Msg = "查询课程域信息成功"
	resp.Base.Code = http.StatusOK
	_, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "课程域编号格式转换失败"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	result, err := service.CourseServ().CourseVideosInfoWithCid(ctx, cid)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
	}
	resp.Videosinfo = result
	c.JSON(consts.StatusOK, resp)
}

// CourseMembersInfo .
// @router /course/members [POST]
func CourseMembersInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.CourseMembersInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.CourseMembersInfoResp)
	resp.Base = new(course.BaseResponse)
	resp.Base.Msg = "查询课程域信息成功"
	resp.Base.Code = http.StatusOK
	_, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "课程域编号格式转换失败"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	result, err := service.CourseServ().CourseMembersInfoWithCid(ctx, cid)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
	}
	resp.Usersinfo = result
	c.JSON(consts.StatusOK, resp)
}
