// Code generated by hertz generator.

package notification

import (
	"context"

	notification "github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/notification"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// QueryNotification .
// @router /notification [GET]
func QueryNotification(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notification.QueryNotificationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notification.QueryNotificationResp)

	c.JSON(consts.StatusOK, resp)
}

// NotificationUnderCourse .
// @router /notification/course [GET]
func NotificationUnderCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notification.NotificationUnderCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notification.NotificationUnderCourseResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateNotification .
// @router /notification/create [POST]
func CreateNotification(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notification.CreateNotificationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notification.CreateNotificationResp)

	c.JSON(consts.StatusOK, resp)
}

// BrowseNotificatio .
// @router /notification/browse [GET]
func BrowseNotificatio(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notification.BrowseNotificationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notification.BrowseNotificationResp)

	c.JSON(consts.StatusOK, resp)
}

// BrowseNotification .
// @router /notification/browse [GET]
func BrowseNotification(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notification.BrowseNotificationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notification.BrowseNotificationResp)

	c.JSON(consts.StatusOK, resp)
}
