// Code generated by hertz generator.

package user

import (
	"context"
	"net/http"
	"strconv"

	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/dal/pg/entity"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/service"

	user "github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserLogin .
// @router /user/login [GET]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserLoginResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "登录成功"
	resp.Base.Code = http.StatusOK

	var uid = new(int64)
	var token = new(string)

	if req.Name != "" {
		uid, token, err = service.UserLoginWithName(ctx, req.Name, req.Password)
	} else {
		uid, token, err = service.UserLoginWithPhone(ctx, req.Phone, req.Password)
	}

	if err != nil {
		resp.Base.Msg = err.Error()
		resp.Base.Code = http.StatusUnauthorized
	} else {
		resp.ID = strconv.FormatInt(*uid, 10)
		resp.Token = *token
	}

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserRegisterResp)
	resp.Base = new(user.BaseResponse)
	err = service.UserRegister(ctx, req.Name, req.Phone, req.Password)
	if err != nil {
		resp.Base.Msg = err.Error()
		resp.Base.Code = http.StatusBadRequest
	} else {
		resp.Base.Msg = "注册成功"
		resp.Base.Code = http.StatusOK
	}
	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /user/info [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserInfoResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "获取成功"
	resp.Base.Code = http.StatusOK

	Uid, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	Authority, exists := c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	uid := Uid.(int64)
	authority := Authority.(entity.AuthorityEnum)
	dbuser, err := service.GetUserInfoWithId(ctx, uid)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	} else {
		resp.Name = dbuser.Name
		resp.Phone = dbuser.Phone
		resp.Avatar = dbuser.Avatar
		resp.Authoriry = string(authority)
	}

	c.JSON(consts.StatusOK, resp)
}

// UserInfoUpdate .
// @router /user/updateinfo [GET]
func UserInfoUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserInfoUpdateResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "修改信息成功"
	resp.Base.Code = http.StatusOK

	Uid, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	uid := Uid.(int64)
	err = service.UpdateUserInfoWithId(ctx, uid, req.Name, req.Password, req.Avatar, req.Phone)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	}
	c.JSON(consts.StatusOK, resp)
}

// ------------------------------------------Techer
// CreateCourse .
// @router /user/teacher/createcourse [POST]
func CreateCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.CreateCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CreateCourseResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "创建课程域成功"
	resp.Base.Code = http.StatusOK
	Uid, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	uid := Uid.(int64)
	err = service.CreateCourseWithId(ctx, uid, req.Title, req.Description, req.Cover)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteCourse .
// @router /user/teacher/deletecourse [POST]
func DeleteCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DeleteCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.DeleteCourseResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "删除课程域成功"
	resp.Base.Code = http.StatusOK
	_, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "课程域编号格式转换失败"
		c.JSON(http.StatusUnauthorized, resp)
	}
	err = service.DeleteCourseWithCid(ctx, cid)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateCourse .
// @router /user/teacher/update/course [POST]
func UpdateCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UpdateCourseResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "更新课程域成功"
	resp.Base.Code = http.StatusOK
	_, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "课程域编号格式转换失败"
		c.JSON(http.StatusUnauthorized, resp)
	}
	err = service.UpdateCourseWithCid(ctx, cid, req.Title, req.Description, req.Cover)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	}
	c.JSON(consts.StatusOK, resp)
}

// InviteStudent .
// @router /user/teacher/invite [POST]
func InviteStudent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.InviteStudentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.InviteStudentResp)
	resp.Base = new(user.BaseResponse)
	resp.Base.Msg = "邀请成功"
	resp.Base.Code = http.StatusOK
	_, exists := c.Get("uid")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	_, exists = c.Get("authority")
	if !exists {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "未获取到完整权限信息"
		c.JSON(http.StatusUnauthorized, resp)
		return
	}
	cid, err := strconv.ParseInt(req.Cid, 10, 64)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "课程域编号格式转换失败"
		c.JSON(http.StatusUnauthorized, resp)
	}
	sid, err := strconv.ParseInt(req.Sid, 10, 64)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "学生编号格式转换失败"
		c.JSON(http.StatusUnauthorized, resp)
	}
	err = service.InviteStudentWithCidAndSid(ctx, cid, sid)
	if err != nil {
		resp.Base.Code = http.StatusBadRequest
		resp.Base.Msg = err.Error()
	}
	c.JSON(consts.StatusOK, resp)
}

// OperateMember .
// @router /user/teacher/update/course/member [POST]
func OperateMember(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.OperateMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.OperateMemberResp)

	c.JSON(consts.StatusOK, resp)
}

// UploadVideo .
// @router /user/teacher/uploadvideo [POST]
func UploadVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UploadVideoResp)

	c.JSON(consts.StatusOK, resp)
}
