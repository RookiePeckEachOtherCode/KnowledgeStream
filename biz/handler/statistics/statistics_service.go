// Code generated by hertz generator.

package statistics

import (
	"context"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/base"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/srverror"
	statistics "github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/model/statistics"
	"github.com/RookiePeckEachOtherCode/KnowledgeStream/biz/service"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"net/http"
)

// StudentStatistics .
// @router /statistics/faculty-student [GET]
func StudentStatistics(ctx context.Context, c *app.RequestContext) {
	var err error
	var req statistics.StudentStatisticsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(statistics.StudentStatisticsResp)
	resp.Base = new(base.BaseResponse)
	/*_, authority, err := utils.AuthCheck(c)
	if err != nil {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	if authority != entity.AuthoritySuperAdmin {
		resp.Base.Code = http.StatusUnauthorized
		resp.Base.Msg = "用户权限不够"
		c.JSON(consts.StatusOK, resp)
		return
	}*/
	result, err := service.UserServ().StudentsStatistics(ctx, req.Offset, req.Size)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Datas = result
	resp.Base = srverror.WrapWithSuccess("查询学生统计成功")
	c.JSON(consts.StatusOK, resp)
}

// TeacherStatistics .
// @router /statistics/faculty-teacher [GET]
func TeacherStatistics(ctx context.Context, c *app.RequestContext) {
	var err error
	var req statistics.TeacherStatisticsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(statistics.TeacherStatisticsResp)
	resp.Base = new(base.BaseResponse)

	result, err := service.UserServ().TeachersStatistics(ctx, req.Offset, req.Size)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Datas = result
	resp.Base = srverror.WrapWithSuccess("查询教师统计成功")
	c.JSON(consts.StatusOK, resp)
}

// VideoStatistics .
// @router /statistics/video-major [GET]
func VideoStatistics(ctx context.Context, c *app.RequestContext) {
	var err error
	var req statistics.VideoStatisticsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(statistics.VideoStatisticsResp)
	resp.Base = new(base.BaseResponse)
	result, err := service.VideoServ().VideosStatistics(ctx, req.Offset, req.Size)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Datas = result
	resp.Base = srverror.WrapWithSuccess("查询视频统计成功")
	c.JSON(consts.StatusOK, resp)
}

// VideoPlaysStatistics .
// @router /statistics/video-plays [GET]
func VideoPlaysStatistics(ctx context.Context, c *app.RequestContext) {
	var err error
	var req statistics.VideoPlaysStatisticsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(statistics.VideoPlaysStatisticsResp)
	resp.Base = new(base.BaseResponse)
	result, err := service.VideoServ().VideoPlaysStatistics(ctx, req.Offset, req.Size)
	if err != nil {
		resp.Base = srverror.WrapWithError(http.StatusBadRequest, err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Datas = result
	resp.Base = srverror.WrapWithSuccess("查询视频播放量统计成功")
	c.JSON(consts.StatusOK, resp)
}
